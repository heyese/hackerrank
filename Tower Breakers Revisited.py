#!/bin/env python
import itertools
import bisect
import math
import sys
import datetime
import numpy


# https://www.hackerrank.com/challenges/tower-breakers-revisited-1

# Easier to think in terms of prime factors - ie. towers are just a number of blocks high,
# and you can smash as many blocks as you like.

# This is currently blowing my mind.
# Let's see if we can at least come up with a brute force approach

def timer(func):
    def new_func(towers):
        then = datetime.datetime.now()
        j = func(towers)
        now = datetime.datetime.now()
        difference = now - then
        print('That took %s.%s seconds' % (difference.seconds, difference.microseconds))
        return j
    return new_func

def next_prime():
    # Calculate the next prime to test
    i = primes[-1] + 1
    while True:
        prime = True
        for j in (p for p in primes if p < math.sqrt(i)):
            if i % j == 0:
                prime = False
        if prime is True:
            break
        i += 1
    #print('Added prime: %s' % i)
    return i

def num_prime_factors(x):
    num_factors = 0
    root = math.sqrt(x)
    for i in primes:
        if i > root:
            break
        while True:
            if x % i == 0:
                num_factors += 1
                x = x // i
            else:
                break
        if x == 1:
            break
    return num_factors

def prime_factorisation(x):
    factorisation = []
    for i in primes:
        while True:
            if x % i == 0:
                factorisation.append(i)
                x = x // i
            else:
                break
        if x == 1:
            break
        if i == primes[-1]:
            primes.append(next_prime())

    return factorisation

# Let's give the primes list a start ... =
@timer
def populate_primes_by_original_method(x):
    while True:
        p = next_prime()
        primes.append(p)
        if p > x:
            break

@timer
def populate_primes_by_filtering(x):
    'Populates the primes list for all primes < x'
    nums = range(3, x+1, 2)
    while True:
        p = nums.pop(0)
        primes.append(p)
        nums = [i for i in nums if i % p != 0]
        if len(nums) == 0:
            break
    print(primes)

@timer
def populate_primes_with_bisect(x):
    'Populates the primes list for all primes < x'
    nums = [i for i in range(3, x+1, 2)]
    while True:
        try:
            p = nums.pop(0)
        except:
            break
        primes.append(p)
        j = p**2
        while j <= x:
            index = bisect.bisect_left(nums, j)
            try:
                if nums[index] == j:
                    nums.pop(index)
            except:
                pass
            j += 2 * p

#@timer
def primesfrom2to(n):
    # https://stackoverflow.com/questions/2068372/fastest-way-to-list-all-primes-below-n-in-python/3035188#3035188
    """ Input n>=6, Returns a array of primes, 2 <= p < n """
    sieve = numpy.ones(n/3 + (n%6==2), dtype=numpy.bool)
    sieve[0] = False
    for i in xrange(int(n**0.5)/3+1):
        if sieve[i]:
            k=3*i+1|1
            sieve[      ((k*k)/3)      ::2*k] = False
            sieve[(k*k+4*k-2*k*(i&1))/3::2*k] = False
    return numpy.r_[2,3,((3*numpy.nonzero(sieve)[0]+1)|1)]

def num_factors_list(l):
    num_factors_l = []
    for i in l:
        num_factors_l.append(num_prime_factors(i))
    return num_factors_l

def prime_factors_list(l):
    prime_factored_l = []
    for i in l:
        prime_factored_l.append(prime_factorisation(i))
    return prime_factored_l

def strip_zero_height_towers(towers):
    return tuple(sorted([t for t in towers if t != 0]))

# Now - I will look for the quickest way to win the game
def possible_next_states(towers):
    'Returns a list of possible outcomes after the next move, with zero height towers stripped out'
    results = set()
    for i in range(len(towers)):
        t = towers[i]
        for j in range(t):
            if j != 0:
                result = towers[:i] + (j,) + towers[i+1:]
            else:
                result = towers[:i] + towers[i+1:]
            if len(result) > 0:
                results.add(tuple(sorted(result)))
    return results

def possible_next_states_with_filters(towers):
    'Returns a list of possible outcomes after the next move, with zero height towers stripped out, \
    but also removing various losing subsets of the towers'
    results = set()
    for i in range(len(towers)):
        t = towers[i]
        for j in range(t):
            if j != 0:
                result = towers[:i] + (j,) + towers[i+1:]
            else:
                result = towers[:i] + towers[i+1:]
            if len(result) > 0:
                results.add(tuple(sorted(result)))

    # Strip out all pairs of tower heights
    results = strip_pairs_from_all_states(results)
    return results

def strip_pairs_from_all_states(states):
    # Any pair of towers, on their own, is a losing state.  (P2 simply copies P1)
    # If T1 is a winning state, T2 a losing state -> T1 + T2 is a winning state.
    # (Player 1 plays T1 to win, and if Player 2 moves in T2, player 1 forces them to lose that game.)
    # Conversely, if T1, T2 are losing states -> T1 + T2 is a losing state.
    # (Player 2 just plays them like two separate games)
    # So when working out if a state is a winning state, we can strip out all the sub-states it contains
    # that are known to be losing states.
    # So this function strips out all pairs of towers that are the same length from each state.
    # Remember that 'states' is a set of ordered tuples, where an ordered tuple represents a state
    stripped_states = set()
    for s in states:
        stripped_state = strip_pairs(s)
        stripped_states.add(stripped_state)
    return stripped_states

def strip_pairs(towers):
    stripped_state = []
    for i in sorted(set(towers)):
        if towers.count(i) % 2 != 0:
            stripped_state.append(i)
    return tuple(stripped_state)

winning_states_dict = dict()
def winning_state(towers):
    'Return true if current player is in a winning position with current tower setup'
    if len(towers) == 0:
        return False

    if len(towers) == 1:
        # If there's only one tower, destroy it and you've won
        return True

    # Multiple towers left
    i = 0
    if towers not in winning_states_dict:
        currently_winning = False
        #for state in possible_next_states(towers):
        for state in possible_next_states_with_filters(towers):
        #for state in logical_possible_next_states(towers):

            if not winning_state(state):
                print('Losing sub-state for towers = %s is %s' % (str(towers), str(state)))
                currently_winning = True
                break
        if currently_winning:
            winning_states_dict[towers] = True
        else:
            winning_states_dict[towers] = False

    return winning_states_dict[towers]

#@timer
def who_wins(towers):
    'Puzzle wants me to print 1 if player 1 wins, 2 if player 2 wins'
    if winning_state(towers):
        return 1
    return 2

def get_input():
    x = '''100
    88

    64
    442254 578419 56854 259299 978715 909029 588567 21178 557078 348092 655945 719155 497136 767102 32071 416213 612450 16914 716336 618183 416843 63109 757467 107881 227053 650398 221327 312559 161454 348109 372079 486917 847203 978799 828099 965660 382911 416355 589252 265560 720979 302661 241262 268842 168179 532366 972315 606997 617697 488890 981637 408087 337833 211333 703191 482615 222654 341180 261260 541718 512018 675342 319691 633455
    17
    462595 262940 556178 35757 284921 704583 24246 492228 625161 94265 252626 171733 669105 102558 747177 612731 916135
    10
    958339 754453 10529 20516 990598 249432 683173 890868 643670 718694
    2
    72985 861428
    83

    35
    445579 498263 873870 457735 461939 519007 21198 139951 227543 513258 475728 242474 424492 184373 860564 64849 542260 762825 689792 427539 469430 626785 439755 727758 446388 679470 411015 470607 538705 387986 250500 376045 891256 640193 333161
    50
    147558 849324 96573 874900 13426 170599 422952 136265 187654 630543 21653 301294 520137 18575 680132 888843 85771 226952 461025 929490 743797 717597 986029 762826 667341 201507 244895 234248 716716 521386 598065 172139 211847 305501 851303 321535 427501 159666 962195 205230 723064 788730 644709 167234 728517 28464 478205 629497 505341 976203
    86

    94
    666421 11768 235698 588019 894725 501510 184307 873581 213109 84021 271125 681680 304315 680263 514596 669231 713619 942547 926417 823273 88458 41983 954585 471189 921531 398043 54012 310218 360403 451439 813327 384281 611715 432432 779270 979483 719196 88653 496883 922439 41228 480345 584400 623883 48578 830370 603863 360545 800592 430519 585124 409611 997247 374816 455970 925738 748997 829117 667364 109025 991656 108148 713380 427966 164068 98680 955733 619233 667928 143724 59352 522491 657717 7222 883319 316668 577172 677344 354100 484148 821095 978490 782689 874301 544305 359152 154397 45497 251044 845817 738651 911440 806264 820813
    28
    127979 368068 998140 77650 258643 713623 724369 3579 908240 46553 235741 4346 908464 645465 309552 417482 976634 297614 281324 912907 953651 192847 53557 389456 709432 940524 532232 427203
    48
    554819 223545 80355 705755 790345 190853 422855 552967 800696 253303 253855 955837 422574 28638 786727 199774 974098 242366 59639 414162 812640 232783 300757 491460 550868 872663 290158 712224 613584 580093 353883 89024 333691 694149 37947 166452 146994 786545 917285 250114 998503 417143 780697 350550 286878 859008 402536 126573
    74
    565773 968732 142094 455574 704955 829710 905283 975289 434706 873670 488203 227201 927632 8034 521109 492193 487709 531481 578460 201296 689386 284739 106908 765326 821296 470454 435604 317426 72365 622767 786360 652907 377035 769570 100391 156745 633922 741685 880330 599564 887954 57585 957880 777621 867901 383167 2142 330456 380327 448177 818727 346254 366336 338362 601685 808260 606454 124534 365108 970819 904678 555057 503342 182966 464889 131246 997739 591643 493612 633143 178439 53038 513186 243057
    82

    54
    187454 274799 448328 479880 601162 745907 327451 205318 781121 292972 840639 346189 323683 746895 838847 847114 103600 376474 837918 296688 152785 889648 82946 999591 641920 670505 472044 990204 908096 660115 363272 733626 287217 388744 500848 433066 456049 144169 344506 822936 693898 931269 759733 623579 853177 343725 973076 154052 266717 265216 716255 255468 394348 613667
    68
    945251 476089 48283 993997 1023 729067 600318 952706 284125 835158 880747 903105 327325 814603 289803 459263 269572 251846 144886 370404 581662 20241 168252 524112 424727 505172 461076 525369 20497 974251 16812 911660 520330 161750 696192 368966 942355 424052 179160 360615 103283 798676 52100 524156 436140 572229 623288 853206 840743 806110 682799 132242 208408 714076 461875 435535 910552 294716 326815 50031 498843 487360 958782 355517 734874 251570 747909 694829
    26
    769659 414792 244845 82361 49459 606663 848944 103754 9962 836098 937324 814738 627762 533726 321920 141198 246534 25585 9008 796889 235525 600276 137760 711090 612305 303876
    17
    509598 528749 747343 590250 462668 298109 601520 35073 789907 37263 215270 26354 65944 739292 531944 318082 62140
    80
    766730 431831 719374 453101 881912 512999 639707 713193 67213 273565 253210 121615 808114 556183 167171 327052 698638 442591 780436 647093 330187 494238 322371 620419 557929 544323 861481 739964 223957 706096 941471 534311 599254 679056 992350 873757 89634 432369 126591 412857 826829 764418 864951 582686 445560 71023 714233 892313 867753 30791 43138 748565 574080 758966 853673 953326 398245 54147 302452 596992 795886 427937 335863 330708 3176 90339 959789 562781 592257 479149 819703 104579 825488 612628 66426 738120 170899 767452 311191 905578
    33
    409563 658935 953288 623274 865625 494702 296569 211312 159319 382070 435488 543717 401990 468091 575850 127322 583518 649657 750156 73069 510005 378280 104847 710190 858485 20029 309835 570112 971517 334597 117887 8834 958468
    20
    91033 941159 231089 521267 46591 997452 705272 524935 850491 544059 434169 391932 928732 310111 590433 251603 630150 343498 845610 459955
    30
    192036 354346 224926 906157 271606 901167 449362 976703 652961 902042 856340 127401 287197 823910 183770 409931 378933 991025 894585 472388 9863 553961 678022 529895 477268 321810 161083 75039 321094 895853
    23
    802857 878030 139559 481982 776944 563222 625988 593822 409236 639762 254079 495668 859923 17878 700346 334799 547864 183915 609706 680297 91087 56718 474027
    57
    193744 210680 208431 949060 661453 335617 911462 325295 403848 923593 207797 417442 648894 963080 871384 24176 748488 306414 868953 666344 536676 891058 752046 256464 140097 930688 348354 594256 389637 801189 511411 397297 929286 212229 874494 911441 134556 933347 172829 497688 357722 6497 290810 109808 614910 573158 902980 23783 962509 397002 653751 303439 838349 714510 525321 55592 208374
    49
    524807 579245 555208 617431 742625 405249 219933 304437 368394 682647 364110 847760 959656 693774 444045 932313 755265 717426 750981 764791 265605 167942 571999 419635 894505 485165 475305 256351 945331 528659 214507 290858 74176 687657 891655 470395 847873 458911 992814 983865 679547 392534 936899 362378 827136 318677 844617 894951 569270
    50
    382451 600150 934769 180860 432215 541065 538941 274711 446215 730802 564946 832716 470612 714972 47979 730409 882247 512591 444494 712279 589077 422783 139220 651636 3389 259098 245346 69773 704745 413567 99217 461883 909093 256465 215072 727874 204640 73568 181549 222799 13985 748734 771980 437223 875232 705443 614302 567614 188243 950927
    29
    597931 476034 14873 954561 352957 247408 143093 731811 924842 439548 104036 297915 387794 456019 226151 71223 846913 798868 308637 243357 992117 725576 38626 68364 128306 955314 224690 193059 811289
    89

    20
    394034 165439 611456 777337 44488 229039 752293 526761 79148 451649 656620 579742 18462 877353 832076 867943 174739 451178 515614 15370
    27
    426540 722810 606331 321424 557891 724773 651483 284936 154111 752643 646681 30613 182693 283376 750694 498746 339165 45070 710056 186076 47877 934748 407952 977055 705194 739917 226922
    26
    795467 260577 630922 645936 587695 117627 353629 948524 482561 224864 597484 999861 472569 495846 698471 771604 433795 2185 202319 888947 213982 270063 5806 668088 301026 806537
    75
    164185 794342 442610 202514 493948 959261 312190 502516 481865 917186 317618 706925 360830 722597 669482 85063 632736 220041 232319 8817 897686 716289 862983 344516 509198 786830 433349 339013 376941 819519 707428 130728 671818 173413 196225 340954 671610 408580 252489 348782 18563 763820 699367 96974 644939 351297 410902 837429 525805 66813 947383 942556 595335 986540 658033 88589 63926 291339 166032 372485 301021 776567 539501 596062 776766 644511 321314 757681 356463 118006 256209 833398 254667 705779 949078
    58
    635601 889936 155937 700465 722412 201746 722184 429843 666621 494155 134751 55231 408084 954853 106781 128607 816805 697619 655320 506346 507319 25639 343093 924956 184291 852029 106472 524377 969459 228994 199694 121651 59889 363475 961884 255486 549076 506806 796837 966627 43776 575084 567074 890132 398300 651026 772139 475354 38435 854801 401782 471475 799254 868824 522816 291643 550163 128843
    10
    855508 132361 587548 677153 889293 675199 938039 979324 53641 712114
    51
    493355 375050 857521 626000 104497 793770 449398 280654 287174 556924 104662 708889 763675 134462 510908 814251 556895 606247 411348 949752 460441 339606 116044 108171 673070 506616 432545 85831 816952 969745 196332 38694 205102 753674 645906 525221 846195 368704 472305 65857 727118 622308 999556 585353 990489 280947 744505 910427 739754 304179 247675
    45
    833728 543885 405194 100255 962211 932372 81447 374621 435939 80798 555966 387379 405248 600338 210627 513769 593123 694699 756089 55497 644984 284605 234502 819416 731773 79912 256956 855679 175242 91917 690824 834643 842978 360870 481648 612347 531512 152922 302816 66184 494730 215987 132013 127883 956047
    32
    800541 514500 668124 588893 538316 790047 792348 656388 494869 608896 300042 411875 160411 473916 647732 414615 929636 842356 153654 230053 180059 5723 433704 651467 807082 202508 293989 890316 253971 859240 620106 76745
    54
    106413 60234 495284 81509 609360 643158 274971 465229 716960 971196 595051 678685 324898 10076 25378 481128 750320 414542 214803 106738 834662 923417 420385 805193 577208 230138 873146 256039 863818 32026 371604 296785 208936 584754 775321 420939 433178 969474 192086 56093 904630 591564 198149 858503 25813 480850 20285 2964 622456 242857 661825 323842 311112 966213
    33
    911979 339571 949385 680312 825945 58147 351727 929326 906081 222572 981906 999899 350151 171562 260615 771721 547040 223463 187195 80866 32632 875131 946045 858945 925950 403662 162691 702555 407833 557192 831224 853149 661150
    32
    394877 523791 744339 485482 897250 353986 926367 891656 378935 165916 173600 149543 913045 577040 92577 657643 721851 194664 140529 390806 389475 946778 411649 246673 158794 668512 922890 740317 2669 448230 894010 937738
    89

    67
    907078 71696 484582 706373 460431 33979 566595 842648 149419 466049 469272 93475 831315 706979 15486 489401 272979 190992 2456 15676 415805 418093 728480 85649 798952 94191 945403 267390 608642 630601 254685 530030 924357 69003 775491 968650 574558 887369 695797 259284 924525 122367 712555 942616 368458 461246 713189 311238 40288 490469 386503 772919 406415 168424 166876 767669 23091 749616 133412 539470 654769 866038 802470 132174 988427 595614 346442
    45
    599515 422388 937357 252618 167080 372364 717808 108176 755149 251656 88996 272027 861444 720831 813289 48562 33411 651340 91105 221460 49138 81880 334819 300874 509404 224524 532468 552157 267728 357457 911803 966212 368346 963767 45561 443816 300295 795267 531230 13272 408314 547935 273905 743467 131353
    22
    819350 61186 996370 155955 329617 441948 381708 506486 618177 380971 718604 440073 392118 470341 905134 769610 560131 105266 450492 769124 646819 688783
    96

    37
    986197 786278 767186 121579 942187 116430 216238 204502 771659 84312 20223 620172 670912 147386 469388 159999 346839 14232 862599 782267 854461 812480 22307 162059 609643 739692 367916 433643 415755 239649 832229 621525 309910 178525 943262 757055 179675
    5
    662872 959347 672257 71892 252252
    58
    324824 902398 834987 11908 761977 498627 329171 350086 534077 580463 61695 225509 208793 64914 485930 626075 85994 416944 843523 622626 718168 210587 943847 338818 693624 561808 940614 593247 554638 372399 600354 280117 977192 273763 642274 174739 30794 325479 723966 199486 905673 633959 795760 569196 583965 382676 671455 325904 990415 237668 90683 535579 667396 919110 283462 685858 640235 744583
    61
    834566 153492 351715 206794 62890 621770 622700 128259 188715 265241 569172 835434 739677 327166 783815 488171 301908 941353 512549 227201 621105 389714 819666 606595 761561 755510 988198 901857 8087 915680 437588 776816 256103 228383 119921 24815 911721 383861 998187 141581 180637 710548 38443 661280 275117 43982 835050 836783 293957 248800 56915 432325 52505 668085 427520 429516 932036 441388 285985 65643 427254
    41
    101957 765021 493684 915383 696704 413591 271212 423682 296779 702786 842165 942985 10367 267122 636615 440244 393974 796153 298448 609831 657742 110612 834857 627875 558518 186789 31102 510331 461506 529223 462865 876401 543921 462599 671111 279506 19323 231019 502126 874449 588441
    18
    343431 425965 668516 187216 228230 773479 317444 474480 962973 351223 348149 361181 346579 852407 595815 553899 971195 718030
    99

    4
    548608 724704 116080 645283
    3
    282430 51144 295666
    96

    2
    133419 127348
    12
    782211 922301 968188 751318 320128 589913 37190 769361 360948 428951 17473 758627
    20
    371887 752642 244150 937300 729178 87469 419767 558027 981599 253939 349564 139091 921936 219030 933173 577894 241908 65150 798401 434317
    44
    135259 917732 272739 450226 190798 744472 883175 467073 708171 227853 868659 199396 383550 425528 313484 755665 380673 605208 18553 688785 724868 282390 349852 481544 313395 44406 598276 817717 436349 990116 981065 406971 356334 10967 614035 169831 311722 652674 990819 612218 445212 788043 634272 253942
    13
    763804 733190 688140 269271 322888 448715 545612 883333 147307 970772 452667 424668 881396
    84
    421287 53362 839756 847765 590387 629653 191920 488817 581238 890165 506098 845528 398732 297012 119658 791667 416803 99514 72779 822950 98792 675608 416011 87887 305451 683235 925753 580651 375791 594685 758029 290930 530367 266558 704245 762707 260175 256872 942118 446363 530208 694946 831512 79635 365128 594683 100234 589510 673864 684383 7762 370012 475401 449081 192846 330044 627517 808351 979641 130641 464508 963171 817683 634980 507899 887107 495952 426328 930634 332354 890167 900929 785978 98896 296323 117134 545132 299415 223948 959992 444017 633212 484323 554319
    84

    58
    761283 943447 482648 723078 940528 689630 293743 968377 415798 799054 787135 136655 546148 347714 547152 965359 53353 489816 398690 111663 270795 458709 999561 697151 308425 997773 884696 323979 676387 514203 340994 879879 543657 355348 840726 109287 883568 949150 160431 488551 339650 502897 335299 621341 42055 3538 598373 931341 855013 361533 381661 397022 740203 174149 627842 378237 375734 804125
    15
    800172 709484 936008 854758 403321 686009 708882 17883 507352 216282 804204 69496 712703 570515 367986
    76

    5
    808547 110982 263463 343785 3931
    60
    495571 188190 100251 888209 754546 808565 276138 520645 443746 724373 87054 366412 286724 36787 781667 904537 151623 127823 647306 948151 917633 572012 679990 305632 811205 495637 108997 501743 250789 23293 894741 355540 715267 740033 639698 510185 663917 244286 414294 335186 44567 863249 784619 525669 678867 528472 472911 961685 899963 320954 336236 479650 294389 811897 872993 759084 797168 265860 515096 151126
    14
    700863 215120 257715 656376 922884 385128 129277 836662 318387 950170 54800 805819 703464 377631
    90

    36
    381352 580549 501052 73980 951361 175037 762281 889895 429418 608825 54379 950499 168559 998976 456028 371944 814010 298871 380782 858550 538618 998837 892006 629784 914003 795320 215824 781922 43605 355420 305480 574400 695960 833245 951327 688269
    8
    21169 28491 336782 884347 144509 748314 233025 992473
    91

    32
    164335 121109 753430 864854 760966 493556 59941 572276 18789 569561 974155 410586 193427 192574 822325 745301 561978 127085 264532 103898 130000 710306 496790 208885 407447 306842 699044 475335 904373 449453 805430 708739
    28
    623573 879132 644542 833580 714216 929346 292679 458765 322406 768749 438097 591792 307532 310573 985160 994656 814236 38317 164692 162310 5596 892744 42793 60577 244119 887021 114318 715383
    54
    36693 858189 429417 736917 754642 215658 583232 399390 936083 508009 867840 810389 332723 839311 84647 909924 944470 509360 517404 694432 74415 111826 816760 565417 868703 248748 639569 431815 447610 634194 662323 257044 706843 52197 893232 10237 956078 22165 514437 8352 798675 110380 964727 239543 151278 221272 18273 987019 869160 306076 195318 127450 42489 545686
    17
    858151 384202 678214 219316 296149 305323 561743 975514 715018 704565 728269 712353 666689 94707 871007 732264 870302
    74
    579067 659894 429954 228488 641715 423132 818397 846468 5654 670353 992221 732934 182935 587507 470355 449688 872227 759224 225092 67942 476903 673313 132613 997430 395166 780368 177176 290629 363710 277883 373549 667369 993395 896057 995038 578080 114813 527522 726133 160421 51758 715619 30199 702457 105358 967170 965704 300260 941076 756616 193972 434164 161709 558599 240590 816638 515664 222046 569833 342946 221644 773483 756794 570587 309623 92444 922340 430283 656871 586766 436450 909723 790090 188531
    82

    61
    81298 785795 20850 726769 628887 701649 629815 716531 987137 454513 398133 474267 331982 467969 624566 33263 825795 241120 936985 154599 803306 886645 426771 275032 635058 138474 856493 119794 490721 700148 216736 6085 169762 471411 158 118898 718400 849855 111123 958667 243895 958971 297944 442064 560507 644661 398047 599840 674826 350118 55652 444165 123968 64339 499324 795879 337041 240858 295881 460632 67044
    49
    895921 560839 691975 818061 121646 692037 65061 663213 975093 526865 681326 95978 417551 402100 701890 957533 756503 995773 780138 730663 477985 227567 429980 101914 11031 414858 926766 856765 603444 722027 203200 884092 919811 615916 915139 130358 989407 114822 874254 48014 998010 567208 244742 242941 842440 734550 823214 686405 230993
    32
    98460 176842 979642 102424 296092 737482 871088 450543 4129 323603 21030 856846 465977 593747 238769 518120 689997 743547 565692 815767 77504 686228 162665 440106 388137 379385 185646 771839 792401 518024 416164 704545
    10
    890600 484453 916097 90859 277779 128967 187933 239664 261347 859722
    76

    54
    572988 107181 401607 391817 429195 589405 968019 275748 724086 175264 411881 774897 19104 947005 34104 100464 684958 155626 837928 960229 707863 37793 405980 977853 31143 4646 967620 873866 986559 307395 549489 938801 70687 317017 541095 654454 892540 80051 680139 242385 720152 773854 84989 528805 106536 928179 127378 428848 904581 870009 525969 449057 791754 979469
    12
    960051 927852 329211 821328 886124 224815 847803 874380 210728 263503 624432 205387
    8
    264304 836900 910161 174586 915799 70831 329070 400310
    71
    577053 675898 855110 806745 974462 296577 439592 510254 60461 667825 749285 26263 565301 376824 447993 696046 309339 252652 502512 957920 338756 30169 757183 958304 544017 216813 877046 48834 543667 292540 238317 786460 851284 752612 557345 208888 206888 196835 623649 642725 357798 458186 844596 792469 453402 24139 726605 610550 95558 730837 396114 993610 983463 678935 808643 231898 159977 108211 277827 641062 329891 523301 650513 899348 757166 726772 749696 509858 509989 403681 811004
    41
    437177 226356 123909 17330 564569 575041 952516 212463 793173 208374 578832 125410 646952 189639 930772 31797 428440 674384 331469 401488 977462 561652 863638 637102 323117 972704 463886 68282 415172 418012 149130 245954 958036 476820 404404 920680 875527 724148 189399 662099 547995
    45
    23967 671264 764393 32383 581045 586371 625731 553902 51733 346719 211086 201560 74348 807738 288980 53875 627581 69689 566314 440621 612288 252612 549375 745621 273091 634333 244563 772709 137091 324753 849263 740686 616619 862498 186554 345353 177250 339973 873233 900155 742899 49802 659548 350269 406956
    12
    262035 28988 979672 112895 797420 431343 301848 687111 847756 289348 759103 849867
    30
    437715 426649 968447 185996 954371 111078 773451 722925 932616 267573 707256 820245 895785 995833 236527 76638 345499 473142 753100 802244 424657 789129 837517 760169 877837 349074 299798 453956 823637 595103
    16
    974160 334272 327622 518082 923352 226495 269418 579399 989298 578826 670415 206950 463616 795821 613529 631787
    28
    317833 274236 232238 113581 878949 114076 835931 347751 229813 763028 35614 608109 804714 102608 615648 852429 100905 601504 587491 961073 452285 670337 774725 175215 209132 473891 453259 648644
    16
    28272 957743 14914 778914 129433 736889 251722 690363 429646 423432 487551 923491 138059 72934 673544 803441
    60
    215282 294531 324101 13663 519547 77666 782832 391784 838724 154010 583864 376905 403127 628325 946716 547361 246577 231228 803276 343900 612188 614170 376980 861049 1369 753384 446700 553525 276783 362375 104371 365134 75176 879616 347637 39253 614896 988206 837708 664526 183605 681292 424740 38007 392045 605666 513510 484888 809770 105803 553770 277985 846846 890516 518669 550113 603984 413510 437482 72699
    83

    47
    82372 257064 550420 850403 271330 355624 615073 229640 977408 175850 111340 322652 212174 67569 473202 32915 968833 605279 771984 619287 898432 529708 333791 762457 992262 39160 102856 936184 52985 95087 855796 674175 927474 133427 90606 880104 113453 510829 33182 82313 104532 616864 209467 9112 970296 776197 668011
    66
    778729 212673 776315 374836 535195 7809 797669 693841 595942 322741 314617 571718 561237 956944 533629 299535 823639 990461 981949 632871 411136 242144 763563 436877 99786 740620 777007 446579 371501 68523 39400 168642 363329 791476 610781 648520 119278 569954 924243 167660 77690 837947 930217 960957 707297 40897 329787 78050 390839 884924 740977 815736 601607 618074 671795 945179 389253 646577 487924 216034 990091 728807 213972 645856 417951 985967
    30
    213944 765284 598020 764185 780344 292512 339060 81409 379766 11436 888102 427547 404286 410431 624874 988613 889439 469908 209874 256477 982099 891431 702112 491179 496234 599311 431018 95691 954580 383003
    21
    944437 311754 589639 307863 344580 289072 625809 468644 910617 989403 274053 888987 505231 328024 958907 422966 172435 669632 719827 17156 614620'''
    return x

def get_output():
    x = '''1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
1
2
1
1
1
1
2
1
1
1
1
1
1
1
1
1
1
1
1
2
2
1
1
1
1
1
1
1
2
1
1
1
1
1
1
1
1
1
1
1
1
1'''
    return x
# I think it's easier to think in terms of prime factors - then it's the same as thinking of a tower as being
# so many blocks high, and you can just knock off as many of the blocks as you want.
# So first step is to make this conversion, so we know how many blocks high each tower is.
# I don't actually care what the factors are - just how many of them there are.
# So the tower 6 = 2 * 3 is equivalent to the tower 9 = 3 * 3.
# Towers of height 1 can be ignored

#primes = [2]
#populate_primes_by_original_method(300000)  # Took so long, I couldn't be bothered to wait
#primes = [2]
#populate_primes_by_filtering(300000)  # Took about 40 seconds
#primes = [2]
#populate_primes_with_bisect(300000) #  Took between 3 and 4 seconds !!!  Unbelievable
#primes = primesfrom2to(1000000)        # Took 0.3 seconds ...  uses numpy, which I can't use on hackerrank.

dryrun = True
# Deal with the input
if not dryrun:
    T = int(input().strip())
else:
    data = get_input().split('\n')
    output = get_output().split('\n')
    T = int(data.pop(0).strip())
#primes = [2]
#populate_primes_with_bisect(1000000)
primes = primesfrom2to(1000000)
print('Finished populating primes')
i = 0
for game in range(1):
    if not dryrun:
        N = int(input().strip())
        tower_heights = map(int, input().strip().split())
    else:
        i += 1
        N = int(data.pop(0).strip())
        #tower_heights = map(int, data.pop(0).strip().split())
        tower_heights = [763804, 733190, 688140, 269271, 322888, 448715, 545612, 883333, 147307, 970772, 452667, 424668, 881396]

    # Convert given tower heights into num prime factors, so tower heights can be thought of simply as blocks
    tower_heights_num_factors = num_factors_list(tower_heights)
    print('Tower heights: %s' % tower_heights)
    print('tower_heights_num_factors : %s' % tower_heights_num_factors)
    # Remove the towers of zero height (ie. towers that had height 1)
    tower_heights_zeros_stripped = strip_zero_height_towers(tower_heights_num_factors)
    print('tower_heights_zeros_stripped: %s' % str(tower_heights_zeros_stripped))
    # Strip pairs of towers of same height out - reasoning given in the function
    tower_heights_pairs_stripped = strip_pairs(tower_heights_zeros_stripped)
    print('tower_heights_pairs_stripped: %s' % str(tower_heights_pairs_stripped))
    #stream_lined_tower_heights = stream_line_tower_heights(tower_heights_pairs_stripped)
    print(who_wins(tower_heights_pairs_stripped))
    #op = int(output.pop(0))
    #if who_wins(tower_heights_pairs_stripped) != op:
    #    print('Length input = %s. Output should be %s, I gave: %s' % (len(tower_heights_num_factors), op, who_wins(tower_heights_pairs_stripped)))
    #    print("")


# Clear that order of towers makes no difference, so can reduce to towers in sorted height order.

# T1, T2 losing states
# Then T1 + T2 is a losing state.  Player 2 just plays them like two separate games

# T1 a winning state, T2 a losing state -> T1 + T2 is a winning state.
# Player 1 plays T1 to win, and if Player 2 moves in T2, player 1 forces them to lose that game.

# The idea here is that you can reduce the problem by cutting out losing states.

# Any pair of towers, T1, T2, with T1 = T2 is a losing state
# -> You can assume you only have a single instance of a tower of each length (as you can think of them modulo 2).
# Think that the only meaningful move on a tower is to:
#   * make its length equal to another tower
#   * make it's length equal to one more than another tower
#   * make it's length equal to 1.
# ie.  I think (15,10,7,3) is equivalent to (8,6,4,2).
#      And (15,10,7,3,1) is equivalent to (9, 7, 5, 3, 1).
# Otherwise all you've done is give the next player the same situation you're in, which has to be a losing move.
#
# Input = [763804, 733190, 688140, 269271, 322888, 448715, 545612, 883333, 147307, 970772, 452667, 424668, 881396], output should be 2, I gave: 1
# Input = [800172, 709484, 936008, 854758, 403321, 686009, 708882, 17883, 507352, 216282, 804204, 69496, 712703, 570515, 367986], output should be 1, I gave: 2